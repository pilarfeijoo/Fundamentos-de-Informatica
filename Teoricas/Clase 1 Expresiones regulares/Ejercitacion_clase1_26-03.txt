Para pensar 1
expresion regular a: '^palabra' True

expresion regular b: '\Apalabra' False

expresion regular c: 'palabra$' False

expresion regular d: 'palabra\Z' False
-------------------------------------------------------------------
Para pensar II: "X(.*)Y"
	Lo que esta entre X e Y
	 (.) que puede ser cualquier carÃ¡cter y el asterÃ­sco (*) que puede haber 0 o mÃ¡s de estos 

-------------------------------------------------------------------
Para pensar ğŸ¤”: Â¿Existe una Ãºnica respuesta para los ejercicios? Â¿QuÃ© otras alternativas se te ocurren?
DesafÃ­o I: Â¿ConstruÃ­ la expresiÃ³n regular que obtenga al menos 4 dÃ­gitos?  \d{4,} o \w{4,} o [^a-z]
DesafÃ­o II: Â¿ConstruÃ­ la expresiÃ³n regular que obtenga al entre 3 y 6 letras minÃºsculas?   [a-z]{3,6} o \D{3,6}
DesafÃ­o III: Â¿ConstruÃ­ la expresiÃ³n regular que obtenga todas las apariciones del patrÃ³n ab en un string?  ab* o ab{0,} o ab+


-------------------------------------------------------------------
Desafio IV: Â¿QuÃ© expresiÃ³n regular usarÃ­as para extraer el nÃºmero de estudiantes que hay en una clase segÃºn el siguiente texto:
texto = 'En la clase de IntroducciÃ³n a la programaciÃ³n hay 30 estudiantes' 
\d+ o \d*
-------------------------------------------------------------------
Desafio V: imprimÃ­ el fragmento del texto entre la posiciÃ³n 22 y 26 Â¿QuÃ© resultado obtenÃ©s? Â¿QuÃ© quiere decir el mensaje span?
<re.Match object; span=(22, 26), match='amet'>
(texto[22:26]) = 'amet'

span significa ubicacion y match es la expresion con la que logro coincidir la busqueda.
-------------------------------------------------------------------
Con search obtenemos la ubicacion exacta de la expresion(patron) buscada.
Match busca un si el patron esta al inicio de la cadena.
Group, agrupa la ubicacion de caracteres que encontro search y las devuelve como un string.
Esto sirve porque search no me devuelve el string puro y no el string en si.

findall, nos devuelve una lista con todas las coicidencias del patron que busque dentro de esta como elementos individuales dentro de la misma.
sub remplaza una expresion por algo que escribamos en este caso "###"

Desafio VI: ExpresÃ¡ el patron de bÃºsqueda utilizando lo visto anteriormente sobre metacaracteres y rangos.????
ejemplos de aplicacion 

>>> texto = "11111 ab 1111111111 ab 11111111 ab"
>>> re.findall("ab", texto)			
['ab', 'ab', 'ab']
>>> len(re.findall("ab", texto))
3
>>> texto = 'En la clase de IntroducciÃ³n a la programaciÃ³n hay 30 estudiantes'
>>> re.search("30", texto).group()
'30'
>>> int(re.search("30", texto).group())
30

